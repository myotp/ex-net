* Debug
DebugManager.enable(:pcap)
DebugManager.disable(:pcap)
DebugManager.enable(:eth)
DebugManager.disable(:eth)
DebugManager.enable(:arp)
DebugManager.disable(:arp)
DebugManager.enable(:ip)
DebugManager.disable(:ip)
DebugManager.enable(:udp)
DebugManager.disable(:udp)
DebugManager.enable(:dns)
DebugManager.disable(:dns)
DebugManager.enable(:tcp)
DebugManager.disable(:tcp)

* ARP
DebugManager.enable(:arp)
{:ok, mac_addr} = ExARP.find_mac_address("192.168.1.253")
ExNet.Core.Ethernet.mac_i2s(mac_addr)
{:error, :not_found} = ExARP.find_mac_address("192.168.1.222")

{:ok, mac_addr} = ExARP.find_mac_address("192.168.1.1")
ExNet.Core.Ethernet.mac_i2s(mac_addr)

* UDP
# 192.168.1.90 <--> 192.168.1.155
#   [remote]           [ex-net]

# == receive packets ==
# [ex-net]
DebugManager.enable(:udp)
{:ok, mac_addr} = ExNet.Api.Inet.find_mac_address("192.168.1.90")
{:ok, socket} = ExUDP.open(8888)
# [remote]
iex
{:ok, socket} = :gen_udp.open(9090, [:binary, active: true])
:gen_udp.send(socket, {192,168,1,155}, 8888, "hello222")
# [ex-net]
flush()
# == send packets ==
ExUDP.send(socket, "192.168.1.90", 9090, "Hello, from ex-net")

* DNS
DebugManager.enable(:dns)
{:ok, ip_addr} = ExDNS.find_ip_address("ifconfig.me")
IPv4.ip_addr_to_string(ip_addr)

* TCP
# [remote]
{:ok, listen_socket} = :gen_tcp.listen(6789, [:binary, packet: 0, active: false, reuseadd: true])
{:ok, socket} = :gen_tcp.accept(listen_socket)

# [ex-net]
DebugManager.enable(:tcp)
{:ok, socket} = ExTCP.connect("192.168.1.90", 6789)
ExTCP.send(socket, "Hello TCP")

# [remote]
:gen_tcp.send(socket, "hello")
:gen_tcp.send(socket, "123")
